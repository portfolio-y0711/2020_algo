// case 1
//const jobs = [
//[0, 3],
//[1, 9],
//[2, 6]
//];

// case3
const jobs = [
  [0, 3],
  [1, 9],
  [2, 6],
  [5, 2],
  [4, 5]
];

interface Job {
  arrived_at: number;
  duration: number;
}

let backlog: Job[] = new Array();

jobs.map(job =>
  backlog.push({
    arrived_at: job[0],
    duration: job[1]
  })
);

console.log(backlog);

let reached = backlog
  .filter(job => job.arrived_at <= 3)
  .sort((pre, ante) => {
    return pre.duration - ante.duration;
  });

console.log("-------------");

console.log(reached);
let unreached = backlog
  .filter(job => job.arrived_at > 3)
  .sort((pre, ante) => pre.arrived_at - ante.arrived_at);

console.log("-------------");
console.log(unreached);

backlog = reached.concat(unreached);
console.log(backlog);

let job: Job;
let current_time = 0;

if (current_time >= (job = backlog.shift()).arrived_at) {
  current_time = current_time + job.duration;
}

//console.log(current_time);

backlog = backlog
  .filter(job => job.arrived_at <= current_time)
  .sort((prev, next) => prev.duration - next.duration);

current_time = current_time + job.duration;

