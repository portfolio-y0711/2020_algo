import { sampleProvider, groupByLength } from "./longest_string_chain";

describe("sample 준비", () => {
  it("sampleProvider라는 함수 객체가 존재한다.", () => {
    expect(sampleProvider).toBeDefined();
  });

  it("sampleProvider는 인자로 샘플 번호를 받아 해당 샘플 배열을 리턴한다.", () => {
    expect(sampleProvider(0)).toEqual(["a", "b", "ba", "bca", "bda", "bdca"]);
  });
});

describe("data structure 준비", () => {
  it("groupByLength 객체는 Map 형을 리턴한다.", () => {
    let result = groupByLength(["bca", "bda", "bdca", "a", "b", "ba"]);
    expect(result).toBeInstanceOf(Map);
  });

  it("groupByLength 객체는 모든 문자열 길이를 키로 가진다.", () => {
    let result = groupByLength(["bca", "bda", "bdca", "a", "b", "ba"]);
    ["bca", "bda", "bdca", "a", "b", "ba"].forEach(x =>
      expect(result.has(x.length)).toBeTruthy()
    );
  });

  it("groupByLength 객체는 모든 문자열이 문자열 길이를 hash값으로 가지는 hashtable에 저장된다", () => {
    let result = groupByLength(["bca", "bda", "bdca", "a", "b", "ba"]);
    ["bca", "bda", "bdca", "a", "b", "ba"].forEach(x =>
      expect(result.get(x.length)).toContain(x)
    );
  });
});

describe("getMaxChainLength 준비", () => {
  it("getMaxChainLength 객체는 문자열의 길이가 짧은 순서대로 반환하는 제너레이터 함수이다.", () => {});
});

describe("longestStrChain 준비", () => {
  it("longestStrChain은 문자열을 받아서 정답을 반환한다.", () => {});
});

